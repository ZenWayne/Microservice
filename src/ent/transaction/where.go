// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"Microservice/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTo, v))
}

// TokenId applies equality check predicate on the "tokenId" field. It's identical to TokenIdEQ.
func TokenId(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTokenId, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTo, v))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTo, v))
}

// TokenIdEQ applies the EQ predicate on the "tokenId" field.
func TokenIdEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTokenId, v))
}

// TokenIdNEQ applies the NEQ predicate on the "tokenId" field.
func TokenIdNEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTokenId, v))
}

// TokenIdIn applies the In predicate on the "tokenId" field.
func TokenIdIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTokenId, vs...))
}

// TokenIdNotIn applies the NotIn predicate on the "tokenId" field.
func TokenIdNotIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTokenId, vs...))
}

// TokenIdGT applies the GT predicate on the "tokenId" field.
func TokenIdGT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTokenId, v))
}

// TokenIdGTE applies the GTE predicate on the "tokenId" field.
func TokenIdGTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTokenId, v))
}

// TokenIdLT applies the LT predicate on the "tokenId" field.
func TokenIdLT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTokenId, v))
}

// TokenIdLTE applies the LTE predicate on the "tokenId" field.
func TokenIdLTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTokenId, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
