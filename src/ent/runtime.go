// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Microservice/ent/schema"
	"Microservice/ent/transaction"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	transactionFields := schema.Transaction{}.Fields()
	_ = transactionFields
	// transactionDescFrom is the schema descriptor for from field.
	transactionDescFrom := transactionFields[0].Descriptor()
	// transaction.FromValidator is a validator for the "from" field. It is called by the builders before save.
	transaction.FromValidator = func() func(string) error {
		validators := transactionDescFrom.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(from string) error {
			for _, fn := range fns {
				if err := fn(from); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// transactionDescTo is the schema descriptor for to field.
	transactionDescTo := transactionFields[1].Descriptor()
	// transaction.ToValidator is a validator for the "to" field. It is called by the builders before save.
	transaction.ToValidator = func() func(string) error {
		validators := transactionDescTo.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(to string) error {
			for _, fn := range fns {
				if err := fn(to); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// transactionDescTokenId is the schema descriptor for tokenId field.
	transactionDescTokenId := transactionFields[2].Descriptor()
	// transaction.TokenIdValidator is a validator for the "tokenId" field. It is called by the builders before save.
	transaction.TokenIdValidator = transactionDescTokenId.Validators[0].(func(uint64) error)
}
