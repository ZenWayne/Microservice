// Code generated by ent, DO NOT EDIT.

package ent

import (
	"math/big"
	"server/ent/schema"
	"server/ent/transaction"

	"entgo.io/ent/schema/field"
	"github.com/ethereum/go-ethereum/common"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	transactionFields := schema.Transaction{}.Fields()
	_ = transactionFields
	// transactionDescTxHash is the schema descriptor for txHash field.
	transactionDescTxHash := transactionFields[1].Descriptor()
	transaction.ValueScanner.TxHash = transactionDescTxHash.ValueScanner.(field.TypeValueScanner[common.Hash])
	// transaction.TxHashValidator is a validator for the "txHash" field. It is called by the builders before save.
	transaction.TxHashValidator = transactionDescTxHash.Validators[0].(func(string) error)
	// transactionDescFrom is the schema descriptor for from field.
	transactionDescFrom := transactionFields[2].Descriptor()
	transaction.ValueScanner.From = transactionDescFrom.ValueScanner.(field.TypeValueScanner[common.Address])
	// transaction.FromValidator is a validator for the "from" field. It is called by the builders before save.
	transaction.FromValidator = transactionDescFrom.Validators[0].(func(string) error)
	// transactionDescTo is the schema descriptor for to field.
	transactionDescTo := transactionFields[3].Descriptor()
	transaction.ValueScanner.To = transactionDescTo.ValueScanner.(field.TypeValueScanner[common.Address])
	// transaction.ToValidator is a validator for the "to" field. It is called by the builders before save.
	transaction.ToValidator = transactionDescTo.Validators[0].(func(string) error)
	// transactionDescTokenId is the schema descriptor for tokenId field.
	transactionDescTokenId := transactionFields[4].Descriptor()
	transaction.ValueScanner.TokenId = transactionDescTokenId.ValueScanner.(field.TypeValueScanner[*big.Int])
}
