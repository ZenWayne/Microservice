// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"fmt"
	"math/big"
	"server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/ethereum/go-ethereum/common"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// BlockNumber applies equality check predicate on the "blockNumber" field. It's identical to BlockNumberEQ.
func BlockNumber(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldBlockNumber, v))
}

// TxHash applies equality check predicate on the "txHash" field. It's identical to TxHashEQ.
func TxHash(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldTxHash, vc), err)
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldFrom, vc), err)
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldTo, vc), err)
}

// TokenId applies equality check predicate on the "tokenId" field. It's identical to TokenIdEQ.
func TokenId(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldTokenId, vc), err)
}

// BlockNumberEQ applies the EQ predicate on the "blockNumber" field.
func BlockNumberEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "blockNumber" field.
func BlockNumberNEQ(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "blockNumber" field.
func BlockNumberIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "blockNumber" field.
func BlockNumberNotIn(vs ...uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "blockNumber" field.
func BlockNumberGT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "blockNumber" field.
func BlockNumberGTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "blockNumber" field.
func BlockNumberLT(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "blockNumber" field.
func BlockNumberLTE(v uint64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldBlockNumber, v))
}

// TxHashEQ applies the EQ predicate on the "txHash" field.
func TxHashEQ(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldTxHash, vc), err)
}

// TxHashNEQ applies the NEQ predicate on the "txHash" field.
func TxHashNEQ(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldNEQ(FieldTxHash, vc), err)
}

// TxHashIn applies the In predicate on the "txHash" field.
func TxHashIn(vs ...common.Hash) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TxHash.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldIn(FieldTxHash, v...), err)
}

// TxHashNotIn applies the NotIn predicate on the "txHash" field.
func TxHashNotIn(vs ...common.Hash) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TxHash.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldNotIn(FieldTxHash, v...), err)
}

// TxHashGT applies the GT predicate on the "txHash" field.
func TxHashGT(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldGT(FieldTxHash, vc), err)
}

// TxHashGTE applies the GTE predicate on the "txHash" field.
func TxHashGTE(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldGTE(FieldTxHash, vc), err)
}

// TxHashLT applies the LT predicate on the "txHash" field.
func TxHashLT(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldLT(FieldTxHash, vc), err)
}

// TxHashLTE applies the LTE predicate on the "txHash" field.
func TxHashLTE(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	return predicate.TransactionOrErr(sql.FieldLTE(FieldTxHash, vc), err)
}

// TxHashContains applies the Contains predicate on the "txHash" field.
func TxHashContains(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("txHash value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContains(FieldTxHash, vcs), err)
}

// TxHashHasPrefix applies the HasPrefix predicate on the "txHash" field.
func TxHashHasPrefix(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("txHash value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasPrefix(FieldTxHash, vcs), err)
}

// TxHashHasSuffix applies the HasSuffix predicate on the "txHash" field.
func TxHashHasSuffix(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("txHash value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasSuffix(FieldTxHash, vcs), err)
}

// TxHashEqualFold applies the EqualFold predicate on the "txHash" field.
func TxHashEqualFold(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("txHash value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldEqualFold(FieldTxHash, vcs), err)
}

// TxHashContainsFold applies the ContainsFold predicate on the "txHash" field.
func TxHashContainsFold(v common.Hash) predicate.Transaction {
	vc, err := ValueScanner.TxHash.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("txHash value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContainsFold(FieldTxHash, vcs), err)
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldFrom, vc), err)
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldNEQ(FieldFrom, vc), err)
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...common.Address) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.From.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldIn(FieldFrom, v...), err)
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...common.Address) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.From.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldNotIn(FieldFrom, v...), err)
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldGT(FieldFrom, vc), err)
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldGTE(FieldFrom, vc), err)
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldLT(FieldFrom, vc), err)
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	return predicate.TransactionOrErr(sql.FieldLTE(FieldFrom, vc), err)
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("from value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContains(FieldFrom, vcs), err)
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("from value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasPrefix(FieldFrom, vcs), err)
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("from value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasSuffix(FieldFrom, vcs), err)
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("from value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldEqualFold(FieldFrom, vcs), err)
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.From.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("from value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContainsFold(FieldFrom, vcs), err)
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldTo, vc), err)
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldNEQ(FieldTo, vc), err)
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...common.Address) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.To.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldIn(FieldTo, v...), err)
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...common.Address) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.To.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldNotIn(FieldTo, v...), err)
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldGT(FieldTo, vc), err)
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldGTE(FieldTo, vc), err)
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldLT(FieldTo, vc), err)
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	return predicate.TransactionOrErr(sql.FieldLTE(FieldTo, vc), err)
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("to value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContains(FieldTo, vcs), err)
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("to value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasPrefix(FieldTo, vcs), err)
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("to value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasSuffix(FieldTo, vcs), err)
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("to value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldEqualFold(FieldTo, vcs), err)
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v common.Address) predicate.Transaction {
	vc, err := ValueScanner.To.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("to value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContainsFold(FieldTo, vcs), err)
}

// TokenIdEQ applies the EQ predicate on the "tokenId" field.
func TokenIdEQ(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldEQ(FieldTokenId, vc), err)
}

// TokenIdNEQ applies the NEQ predicate on the "tokenId" field.
func TokenIdNEQ(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldNEQ(FieldTokenId, vc), err)
}

// TokenIdIn applies the In predicate on the "tokenId" field.
func TokenIdIn(vs ...*big.Int) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TokenId.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldIn(FieldTokenId, v...), err)
}

// TokenIdNotIn applies the NotIn predicate on the "tokenId" field.
func TokenIdNotIn(vs ...*big.Int) predicate.Transaction {
	var (
		err error
		v   = make([]any, len(vs))
	)
	for i := range v {
		if v[i], err = ValueScanner.TokenId.Value(vs[i]); err != nil {
			break
		}
	}
	return predicate.TransactionOrErr(sql.FieldNotIn(FieldTokenId, v...), err)
}

// TokenIdGT applies the GT predicate on the "tokenId" field.
func TokenIdGT(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldGT(FieldTokenId, vc), err)
}

// TokenIdGTE applies the GTE predicate on the "tokenId" field.
func TokenIdGTE(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldGTE(FieldTokenId, vc), err)
}

// TokenIdLT applies the LT predicate on the "tokenId" field.
func TokenIdLT(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldLT(FieldTokenId, vc), err)
}

// TokenIdLTE applies the LTE predicate on the "tokenId" field.
func TokenIdLTE(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	return predicate.TransactionOrErr(sql.FieldLTE(FieldTokenId, vc), err)
}

// TokenIdContains applies the Contains predicate on the "tokenId" field.
func TokenIdContains(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("tokenId value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContains(FieldTokenId, vcs), err)
}

// TokenIdHasPrefix applies the HasPrefix predicate on the "tokenId" field.
func TokenIdHasPrefix(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("tokenId value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasPrefix(FieldTokenId, vcs), err)
}

// TokenIdHasSuffix applies the HasSuffix predicate on the "tokenId" field.
func TokenIdHasSuffix(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("tokenId value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldHasSuffix(FieldTokenId, vcs), err)
}

// TokenIdEqualFold applies the EqualFold predicate on the "tokenId" field.
func TokenIdEqualFold(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("tokenId value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldEqualFold(FieldTokenId, vcs), err)
}

// TokenIdContainsFold applies the ContainsFold predicate on the "tokenId" field.
func TokenIdContainsFold(v *big.Int) predicate.Transaction {
	vc, err := ValueScanner.TokenId.Value(v)
	vcs, ok := vc.(string)
	if err == nil && !ok {
		err = fmt.Errorf("tokenId value is not a string: %T", vc)
	}
	return predicate.TransactionOrErr(sql.FieldContainsFold(FieldTokenId, vcs), err)
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
