// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"math/big"
	"server/ent/transaction"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ethereum/go-ethereum/common"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BlockNumber holds the value of the "blockNumber" field.
	BlockNumber uint64 `json:"blockNumber,omitempty"`
	// TxHash holds the value of the "txHash" field.
	TxHash common.Hash `json:"txHash,omitempty"`
	// From holds the value of the "from" field.
	From common.Address `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To common.Address `json:"to,omitempty"`
	// TokenId holds the value of the "tokenId" field.
	TokenId      *big.Int `json:"tokenId,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID, transaction.FieldBlockNumber:
			values[i] = new(sql.NullInt64)
		case transaction.FieldTxHash:
			values[i] = transaction.ValueScanner.TxHash.ScanValue()
		case transaction.FieldFrom:
			values[i] = transaction.ValueScanner.From.ScanValue()
		case transaction.FieldTo:
			values[i] = transaction.ValueScanner.To.ScanValue()
		case transaction.FieldTokenId:
			values[i] = transaction.ValueScanner.TokenId.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transaction.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field blockNumber", values[i])
			} else if value.Valid {
				t.BlockNumber = uint64(value.Int64)
			}
		case transaction.FieldTxHash:
			if value, err := transaction.ValueScanner.TxHash.FromValue(values[i]); err != nil {
				return err
			} else {
				t.TxHash = value
			}
		case transaction.FieldFrom:
			if value, err := transaction.ValueScanner.From.FromValue(values[i]); err != nil {
				return err
			} else {
				t.From = value
			}
		case transaction.FieldTo:
			if value, err := transaction.ValueScanner.To.FromValue(values[i]); err != nil {
				return err
			} else {
				t.To = value
			}
		case transaction.FieldTokenId:
			if value, err := transaction.ValueScanner.TokenId.FromValue(values[i]); err != nil {
				return err
			} else {
				t.TokenId = value
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("blockNumber=")
	builder.WriteString(fmt.Sprintf("%v", t.BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("txHash=")
	builder.WriteString(fmt.Sprintf("%v", t.TxHash))
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fmt.Sprintf("%v", t.From))
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(fmt.Sprintf("%v", t.To))
	builder.WriteString(", ")
	builder.WriteString("tokenId=")
	builder.WriteString(fmt.Sprintf("%v", t.TokenId))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
